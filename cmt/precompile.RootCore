#!/bin/bash

MAKEFILE=Makefile.RootCore

NEW_ENV_FILE=$PWD/new_env_file.sh

PYTHON_EXEC_PATH=`which python`
PYTHON_EXEC_PATH=`readlink -f $PYTHON_EXEC_PATH`
PYTHON_INCLUDE_CANDIDATES=${PYTHON_EXEC_PATH//bin\/python*/include\/}
PYTHON_INCLUDE_CANDIDATES=`find $PYTHON_INCLUDE_CANDIDATES -name "python?.?" -type d` # pick only last result
vNUM=0
for path in $PYTHON_INCLUDE_CANDIDATES
do
  version=`basename $path`
  candidateVNUM=${version//python/}
  candidateVNUM=${candidateVNUM//./}
  if test "$candidateVNUM" -ge "$vNUM"
  then
    PYTHON_LIB_VERSION=$version
    vNUM=$candidateVNUM
  fi
done
PYTHON_INCLUDE_PATH=""
for path in $PYTHON_INCLUDE_CANDIDATES
do
  if test "`basename $path`" = $PYTHON_LIB_VERSION
  then
    if test -e $path/import.h -o -e $path/pyconfig.h
    then
      PYTHON_INCLUDE_PATH="$PYTHON_INCLUDE_PATH -I$path"
    fi
    if test -e $path/numpy
    then
      PYTHON_NUMPY_PATH=$path/numpy
    fi
  fi
done

# Change our Makefile to add dependent information:
$ROOTCOREDIR/scripts/set_field.sh $MAKEFILE \
  PACKAGE_CXXFLAGS "$PYTHON_INCLUDE_PATH -std=c++11 -fPIC -fopenmp -lboost_python -lgomp -l$PYTHON_LIB_VERSION" #Â -v

$ROOTCOREDIR/scripts/set_field.sh $MAKEFILE \
  PACKAGE_LDFLAGS "-fPIC -lboost_python -lgomp -l$PYTHON_LIB_VERSION" #   -Wl,--verbose

echo -n > $NEW_ENV_FILE
chmod +x $NEW_ENV_FILE

# Add numpy to python path:
if test "x$PYTHON_NUMPY_PATH" = "x" -a -e /afs/cern.ch/sw/lcg/external/pyanalysis/ 
then
  PYTHON_NUMPY_PATH=`find /afs/cern.ch/sw/lcg/external/pyanalysis/ -maxdepth 1 -name "*$PYTHON_LIB_VERSION" | tail -1`
  PYTHON_NUMPY_PATH=$PYTHON_NUMPY_PATH/$rootCmtConfig/lib/$PYTHON_LIB_VERSION/site-packages
  if test ! -d $PYTHON_NUMPY_PATH
  then
    echo "WARNING: Couldn't set NUMPY path, you will have problem trying to execute python jobs."
  else
    echo "test \"\${PYTHONPATH#*$PYTHON_NUMPY_PATH}\" = \"\${PYTHONPATH}\" && export PYTHONPATH=\$PYTHONPATH:$PYTHON_NUMPY_PATH || true" >> $NEW_ENV_FILE
  fi
fi

# Add rootcore libs to python env file
ROOTCORELIBPATH=${ROOTCOREBIN}/lib/$ROOTCORECONFIG/
echo "test \"\${PYTHONPATH#*$ROOTCORELIBPATH}\" = \"\${PYTHONPATH}\" && export PYTHONPATH=\$PYTHONPATH:$ROOTCORELIBPATH || true" >> $NEW_ENV_FILE

# Add grid_submit scripts to path
GRIDSUBMITPATH=$ROOTCOREBIN/user_scripts/FastNetTool/grid_submit
echo "test \"\${PATH#*$GRIDSUBMITPATH}\" = \"\${PATH}\" && export PATH=\$PATH:$GRIDSUBMITPATH || true" >> $NEW_ENV_FILE

# Source new environment settings before trying to install boost
source $NEW_ENV_FILE || { echo "returning first $?" && echo "returning second $?"; }
source $NEW_ENV_FILE || { echo "Couldn't set environment" && exit 1; }

# Check if it is needed to install_boost 
./install_boost.sh $MAKEFILE $NEW_ENV_FILE $PYTHON_INCLUDE_PATH

# Add boost library to env file (this is not needed: if boost cannot be found, add it via LD_LIBRARY_PATH or via ldconfig)
#BOOST_LIBRARY_PATH=`readlink -f $ROOTCOREBIN/include/boost`
#if test ! -d $BOOST_LIBRARY_PATH
#then
#  echo "WARNING: Couldn't set boost library path."
#else
#  BOOST_LIBRARY_PATH=${BOOST_LIBRARY_PATH%/*/*}/lib
#  test "${LD_LIBRARY_PATH#*$BOOST_LIBRARY_PATH}" = "$LD_LIBRARY_PATH" && echo "export LD_LIBRARY_PATH=\$LD_LIBRARY_PATH:$BOOST_LIBRARY_PATH" >> $NEW_ENV_FILE
#fi
